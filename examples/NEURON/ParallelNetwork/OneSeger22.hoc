
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate OneSeger22

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target

public reference, type, description, name
strdef reference, type, description, name

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma

proc topol() {
    basic_shape()
}

proc basic_shape() {
    Soma {pt3dclear() pt3dadd(0.0, -10.0, 0.0, 20.0) pt3dadd(0.0, 10.0, 0.0, 20.0)}
}

proc subsets() { local i

    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    Soma all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    forsec all {         insert KConductance  { gmax_KConductance = 0.036 }          ek = -77.0  // note: this is val from ChannelML, may be reset later

    }

    forsec all {         insert LeakConductance  { gmax_LeakConductance = 3.0E-4 }  
    }

    forsec all {         insert NaConductance  { gmax_NaConductance = 0.12 }          ena = 50.0  // note: this is val from ChannelML, may be reset later

    }

}

proc geom_nseg() {
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon

    Soma $o2 = new NetCon(&v(1), $o1)
}

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate OneSeger22

